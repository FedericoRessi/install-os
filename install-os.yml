---

- hosts: all
  become: true
  tasks:

    - name: Configure host name
      hostname:
        name: "{{ inventory_hostname }}"
      tags: dns

    - name: Generate /etc/hosts file
      template:
        src: etc/hosts.j2
        dest: /etc/hosts
      tags: dns

    - name: Get management IP from /etc/hosts file
      shell: >
        getent ahostsv4 '{{ inventory_hostname }}'  | awk '{print $1; exit 0}'
      register: management_ip

    - name: Write management_ip to file
      template:
        src: etc/management_ip.j2
        dest: /etc/management_ip

    - name: Install NTP service
      yum:
        name: chrony
        state: installed
      tags: ntp

    - name: Make sure NTP is started up
      systemd:
        name: chronyd
        enabled: yes
        state: restarted
      tags: ntp

    - name: Enable the OpenStack repository
      yum:
        name: centos-release-openstack-ocata
        state: installed
      tags: upgrade

    - name: Upgrade all packages
      yum: name=* state=latest
      tags: upgrade

    - name: Check for reboot hint
      shell: |
        LAST_KERNEL=$(rpm -q --last kernel | awk 'NR==1{sub(/kernel-/,""); print $1}')
        CURRENT_KERNEL=$(uname -r); if [ $LAST_KERNEL != $CURRENT_KERNEL ]; then
          echo 'reboot'
        else
          echo 'no'
        fi
      ignore_errors: true
      register: reboot_hint
      tags: upgrade

    - name: Reboot {{ inventory_hostname }} node
      shell: >
        sleep 2 &&
        shutdown -r +1 "Reboot required to update kernel."
      async: 1
      poll: 0
      ignore_errors: true
      when: reboot_hint.stdout.find("reboot") != -1
      tags: upgrade

    - name: Waiting for {{ inventory_hostname }} node to come back...
      local_action: wait_for host={{ inventory_hostname }} state=started delay=10 timeout=300
      become: false
      when: reboot_hint.stdout.find("reboot") != -1
      tags: upgrade

    - name: Install OpenStack client
      yum:
        name: python-openstackclient,openstack-selinux
        state: installed

    - name: check to see if pip is already installed
      command: "pip --version"
      ignore_errors: true
      register: pip_is_installed
      changed_when: false

    - block:
        - name: download get-pip.py
          get_url:
            url: https://bootstrap.pypa.io/get-pip.py
            dest: /tmp

        - name: install pip
          command: "python /tmp/get-pip.py"

        - name: delete get-pip.py
          file:
            path: /tmp/get-pip.py
            state: absent

      when: pip_is_installed.rc != 0

    - name: Install pexpect
      pip:
        name: pexpect
        version: 4


- hosts: control
  become: true
  environment:
    OS_USERNAME: admin
    OS_PASSWORD: 12345
    OS_PROJECT_NAME: admin
    OS_USER_DOMAIN_ID: default
    OS_PROJECT_DOMAIN_ID: default
    OS_AUTH_URL: 'http://control:35357/v3'
    OS_IDENTITY_API_VERSION: 3
  tasks:

    - name: Install ifconfig
      yum:
        name: net-tools
        state: installed

    - name: Get management interface IP
      shell: >
        ifconfig eth1 | awk '/\sinet\s/{print $2}'
      register: management_ip

    - name: Install MariaDB service
      yum:
        name: mariadb,mariadb-server,python2-PyMySQL,MySQL-python
        state: installed

    - name: Enable access to database via the management network
      template:
        src: etc/my.cnf.d/openstack.cnf.j2
        dest: /etc/my.cnf.d/openstack.cnf

    - name: Start and enable the MariaDB service
      systemd:
        name: mariadb
        enabled: yes
        state: restarted

    - name: Enter root password for MariaDB service
      shell: |
        echo -e "\nn\nY\nY\nY\nY" | mysql_secure_installation

    - name: Install RabbitMQ service
      yum:
        name: rabbitmq-server
        state: installed

    - name: Start and enable RabbitMQ service
      systemd:
        name: rabbitmq-server
        enabled: yes
        state: started

    - name: Add openstack user to RabbitMQ service
      shell: |
        rabbitmqctl add_user openstack 12345
        rabbitmqctl change_password openstack 12345
        rabbitmqctl set_permissions openstack ".*" ".*" ".*"

    - name: Install Memcached service
      yum:
        name: memcached,python-memcached
        state: installed

    - name: Configure Memcached service to use the management IP address
      lineinfile:
        path: "/etc/sysconfig/memcached"
        regexp: '^OPTIONS='
        line: >
          OPTIONS="-l 127.0.0.1,::1,control"

    - name: Start and enable RabbitMQ service
      systemd:
        name: memcached
        enabled: yes
        state: restarted

    - name: Create database for Keystone
      mysql_db:
        name: keystone
        state: present

    - name: Grant proper access to the Keystone database
      mysql_user:
        name: keystone
        host: '{{ item }}'
        password: 12345
        priv: 'keystone.*:ALL'
        state: present
      with_items:
        - 'localhost'
        - '%'

    - name: Install keystone components
      yum:
        name: openstack-keystone,httpd,mod_wsgi
        state: installed

    - name: Configure Keystone database access
      ini_file:
        path: /etc/keystone/keystone.conf
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:

        - section: database
          option: connection
          value: 'mysql+pymysql://keystone:12345@control/keystone'

        - section: token
          option: provider
          value: fernet

    - name: Populate the Identity service database
      become_user: keystone
      shell: >
        keystone-manage db_sync

    - name: Initialize Fernet key repositories
      shell: >
        keystone-manage {{ item }} --keystone-user keystone --keystone-group keystone
      with_items:
        - fernet_setup
        - credential_setup

    - name: Bootstrap the Identity service
      command: >
        keystone-manage bootstrap --bootstrap-password 12345
          --bootstrap-admin-url http://control:35357/v3/
          --bootstrap-internal-url http://control:5000/v3/
          --bootstrap-public-url http://control:5000/v3/
          --bootstrap-region-id RegionOne

    - name: Configure the Apache HTTP server for Keystone
      lineinfile:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^ServerName\s'
        line: ServerName control

    - name: Create a link to the /usr/share/keystone/wsgi-keystone.conf file
      file:
        src: /usr/share/keystone/wsgi-keystone.conf
        dest: /etc/httpd/conf.d/wsgi-keystone.conf
        state: link

    - name: Start the Apache HTTP service and configure it to start when the system boots
      systemd:
        name: httpd
        enabled: yes
        state: restarted

    - name: Create defautl projects
      shell: |
        openstack project show {{ item | lower }} || \
        openstack project create --domain default --description "{{ item }} Project" {{ item | lower }}
      with_items:
        - Service
        - Demo

    - name: Create the demo user
      shell: >
        openstack user show demo ||
        openstack user create --domain default --password demo demo

    - name: Create the user role
      shell: >
        openstack role show user ||
        openstack role create user

    - name: Add the user role to the demo user of the demo project
      command:
        openstack role add --project demo --user demo user

    - name: disable the temporary authentication token mechanism
      ini_file:
        path: /etc/keystone/keystone-paste.ini
        section: "{{ item }}"
        option: admin_token_auth
        state: absent
      with_items:
        - pipeline:public_api
        - pipeline:admin_api
        - pipeline:api_v3

    - name: Check admin user authentication
      environment:
        OS_AUTH_URL: ""
        OS_PASSWORD: ""
      expect:
        command: >
          openstack
            --os-auth-url http://control:35357/v3
            --os-project-domain-name default
            --os-user-domain-name default
            --os-project-name admin
            --os-username admin token issue
        responses:
          Password: 12345

    - name: Check demo user authentication
      environment:
        OS_AUTH_URL: ""
        OS_PASSWORD: ""
      expect:
        command: >
          openstack
            --os-auth-url http://control:5000/v3
            --os-project-domain-name default
            --os-user-domain-name default
            --os-project-name demo
            --os-username demo token issue
        responses:
          Password: demo

    - name: Provide openrc scripts
      become_user: vagrant
      template:
        src: 'openrc/{{ item }}.j2'
        dest: '/home/vagrant/{{ item }}'
      with_items:
        - admin-openrc
        - demo-openrc

    - name: Test openrc scripts
      shell: |
        source '/home/vagrant/{{ item }}'
        openstack token issue
      with_items:
        - admin-openrc
        - demo-openrc

    - name: Create database for Glance
      mysql_db:
        name: glance
        state: present

    - name: Grant proper access to the Glance database
      mysql_user:
        name: glance
        host: '{{ item }}'
        password: 12345
        priv: 'glance.*:ALL'
        state: present
      with_items:
        - 'localhost'
        - '%'

    - name: Create glance user if it doesn't exist
      shell: >
        openstack user show glance ||
        openstack user create --domain default --password 12345 glance

    - name: Add the admin role to the glance user and service project
      command:
        openstack role add --project service --user glance admin

    - name: Create the Glance service entity
      shell: >
        openstack service show glance ||
        openstack service create --name glance --description "OpenStack Image" image

    - name: Create the Image service API endpoints
      shell: >
        (openstack endpoint list -f value -c Region -c 'Service Type' -c Interface |
         grep '^RegionOne image {{ item }}$') ||
        openstack endpoint create --region RegionOne image {{ item }} http://control:9292
      with_items:
        - public
        - internal
        - admin

    - name: Install OpenStack Glance
      yum:
        name: openstack-glance
      register: glance_installed

    - name: Configure Glance database access
      ini_file:
        path: '{{ item }}'
        section: database
        option: connection
        value: 'mysql+pymysql://glance:12345@control/glance'
      with_items:
       - /etc/glance/glance-api.conf
       - /etc/glance/glance-registry.conf

    - name: Remove Glance auth token section
      ini_file:
        path: '{{ item }}'
        section: keystone_authtoken
        state: absent
      with_items:
        - /etc/glance/glance-api.conf
        - /etc/glance/glance-registry.conf
      when: 'glance_installed.changed'

    - name: Configure Glance auth token section
      ini_file:
        path: '{{ item[0] }}'
        section: keystone_authtoken
        option: '{{ item[1].option }}'
        value: '{{ item[1].value }}'
      with_nested:

        - - '/etc/glance/glance-api.conf'
          - '/etc/glance/glance-registry.conf'

        - - option: auth_uri
            value: 'http://control:5000'
          - option: auth_url
            value: 'http://control:35357'
          - option: memcached_servers
            value: 'control:11211'
          - option: auth_type
            value: password
          - option: project_domain_id
            value: default
          - option: user_domain_id
            value: default
          - option: project_name
            value: service
          - option: username
            value: glance
          - option: password
            value: 12345

    - name: Configure Glance paste-deploy
      ini_file:
        path: '{{ item }}'
        section: paste_deploy
        option: flavor
        value: keystone
      with_items:
        - /etc/glance/glance-api.conf
        - /etc/glance/glance-registry.conf

    - name: Configure the local file system store and location of image files
      ini_file:
        path: /etc/glance/glance-api.conf
        section: glance_store
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:
        - option: stores
          value: file,http
        - option: default_store
          value: file
        - option: filesystem_store_datadir
          value: /var/lib/glance/images/

    - name: Populate the Image service database
      become_user: glance
      shell: >
        glance-manage db_sync

    - name: Start the Image services and configure them to start when the system boots
      systemd:
        name: openstack-glance-api
        enabled: yes
        state: restarted

    - name: Check it has Cirros image
      shell: |
        openstack image list -f value -c Name | grep '^cirros$'
      ignore_errors: true
      register: has_cirros_image

    - name: Get Cirros image
      get_url:
        url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img
        dest: /tmp
      register: cirros_image
      when: has_cirros_image.rc != 0

    - name: Upload the image to the Image service
      command: >
        openstack image create cirros
          --file /tmp/cirros-0.3.5-x86_64-disk.img
          --disk-format qcow2
          --container-format bare
          --public
      when: has_cirros_image.rc != 0

    - name: Create databases for Nova
      mysql_db:
        name: "{{ item }}"
        state: present
      with_items:
        - nova_api
        - nova
        - nova_cell0

    - name: Grant proper access to the Nova database
      mysql_user:
        name: nova
        host: '{{ item[0] }}'
        password: 12345
        priv: 'nova_api.*:ALL/nova.*:ALL/nova_cell0.*:ALL'
        state: present
      with_items:
        - 'localhost'
        - '%'

    - name: Create the nova user
      shell: >
        openstack user show nova ||
        openstack user create --domain default --password 12345 nova

    - name: Add the admin role to the nova user of the service project
      command:
        openstack role add --project service --user nova admin

    - name: Create the Nova service entity
      shell: >
        openstack service show nova ||
        openstack service create --name nova --description "OpenStack Compute" compute

    - name: Create the Compute API service endpoints
      shell: >
        (openstack endpoint list -f value -c Region -c 'Service Type' -c Interface |
         grep '^RegionOne compute {{ item }}$') ||
        openstack endpoint create --region RegionOne compute {{ item }} http://control:8774/v2.1
      with_items:
        - public
        - internal
        - admin

    - name: Create a placement service user
      shell: >
        openstack user show placement ||
        openstack user create --domain default --password 12345 placement

    - name: Add the admin role to the placement user of the service project
      command:
        openstack role add --project service --user placement admin

    - name: Create the Placement API entry in the service catalog
      shell: >
        openstack service show placement ||
        openstack service create --name placement --description "Placement API" placement

    - name: Create the Placement API service endpoints
      shell: >
        (openstack endpoint list -f value -c Region -c 'Service Type' -c Interface |
         grep '^RegionOne placement {{ item }}$') ||
        openstack endpoint create --region RegionOne placement {{ item }} http://control:8778
      with_items:
        - public
        - internal
        - admin

    - name: Install and configure Nova components
      yum:
        name:
          - openstack-nova-api
          - openstack-nova-conductor
          - openstack-nova-console
          - openstack-nova-novncproxy
          - openstack-nova-scheduler
          - openstack-nova-placement-api
        state: installed

    - name: Remove Nova auth token section
      ini_file:
        path: /etc/nova/nova.conf
        section: '{{ item }}'
        state: absent
      with_items:
        - keystone_authtoken
        - placement

    - name: Configure Nova control components
      ini_file:
        path: /etc/nova/nova.conf
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:

        - section: DEFAULT
          option: enabled_apis
          value: osapi_compute,metadata
        - section: DEFAULT
          option: my_ip
          value: '{{ management_ip.stdout }}'
        - section: DEFAULT
          option: transport_url
          value: 'rabbit://openstack:12345@control'
        - section: DEFAULT
          option: use_neutron
          value: 'true'
        - section: DEFAULT
          option: firewall_driver
          value: 'nova.virt.firewall.NoopFirewallDriver'

        - section: api
          option: auth_strategy
          value: keystone

        - section: api_database
          option: connection
          value: 'mysql+pymysql://nova:12345@control/nova_api'

        - section: database
          option: connection
          value: 'mysql+pymysql://nova:12345@control/nova'

        - section: glance
          option: api_servers
          value: 'http://control:9292'

        - section: keystone_authtoken
          option: auth_uri
          value: 'http://control:5000'
        - section: keystone_authtoken
          option: auth_url
          value: 'http://control:35357'
        - section: keystone_authtoken
          option: memcached_servers
          value: 'control:11211'
        - section: keystone_authtoken
          option: auth_type
          value: password
        - section: keystone_authtoken
          option: project_domain_id
          value: default
        - section: keystone_authtoken
          option: user_domain_id
          value: default
        - section: keystone_authtoken
          option: project_name
          value: service
        - section: keystone_authtoken
          option: username
          value: nova
        - section: keystone_authtoken
          option: password
          value: 12345

        - section: placement
          option: os_region_name
          value: RegionOne
        - section: placement
          option: project_domain_id
          value: default
        - section: placement
          option: project_name
          value: service
        - section: placement
          option: auth_type
          value: password
        - section: placement
          option: user_domain_id
          value: default
        - section: placement
          option: auth_url
          value: 'http://control:35357/v3'
        - section: placement
          option: username
          value: placement
        - section: placement
          option: password
          value: 12345

        - section: oslo_concurrency
          option: lock_path
          value: /var/lib/nova/tmp

        - section: scheduler
          option: discover_hosts_in_cells_interval
          value: 30

        - section: vnc
          option: vncserver_listen
          value: '$my_ip'
        - section: vnc
          option: vncserver_proxyclient_address
          value: '$my_ip'

    - name: Enable access to the Placement API 
      template:
        src: etc/httpd/conf.d/10-nova-placement-api.conf.j2
        dest: /etc/httpd/conf.d/10-nova-placement-api.conf

    - name: Enable and restart HTTP service
      systemd:
        name: httpd
        enabled: yes
        state: restarted

    - name: Populate the nova-api database
      become_user: nova
      command:
        nova-manage api_db sync

    - name: Register the cell0 database
      become_user: nova
      command:
        nova-manage cell_v2 map_cell0

    - name: Create the cell1 cell
      become_user: nova
      shell: |
        nova-manage cell_v2 list_cells | grep -e "\scell1\s" ||
        nova-manage cell_v2 create_cell --name=cell1 --verbose

    - name: Populate the nova database
      become_user: nova
      command:
        nova-manage db sync

    - name: Verify nova cell0 and cell1 are registered correctly
      shell:
        nova-manage cell_v2 list_cells | grep -e "\s{{ item }}\s"
      with_items:
        - cell0
        - cell1
    - name: Enable and start Nova API, consoleauth, conductor services
      systemd:
        name: '{{ item }}'
        enabled: yes
        state: restarted
      with_items:
        - openstack-nova-api
        - openstack-nova-consoleauth
        - openstack-nova-conductor
        - openstack-nova-scheduler

    - name: Create database for Neutron
      mysql_db:
        name: neutron
        state: present

    - name: Grant proper access to the Neutron database
      mysql_user:
        name: neutron
        host: '{{ item }}'
        password: 12345
        priv: 'neutron.*:ALL'
        state: present
      with_items:
        - 'localhost'
        - '%'

    - name: Create the neutron user
      shell: >
        openstack user show neutron ||
        openstack user create --domain default --password 12345 neutron

    - name: Add the admin role to the neutron user and service project
      command:
        openstack role add --project service --user neutron admin

    - name: Create Neutron service entity
      shell: >
        openstack service show neutron ||
        openstack service create --name neutron --description "OpenStack Networking" network

    - name: Create the Networking service API endpoints
      shell: >
        (openstack endpoint list -f value -c Region -c 'Service Type' -c Interface |
         grep '^RegionOne network {{ item }}$') ||
        openstack endpoint create --region RegionOne network {{ item }} http://control:9696
      with_items:
        - public
        - internal
        - admin

    - name: Install Neutron components
      yum:
        name:
          - openstack-neutron
          - openstack-neutron-ml2
          - openstack-neutron-linuxbridge
          - ebtables
        state: installed

    - name: Remove Neutron auth token section
      ini_file:
        path: /etc/neutron/neutron.conf
        section: '{{ item }}'
        state: absent
      with_items:
        - keystone_authtoken

    - name: Configure Neutron server components
      ini_file:
        path: /etc/neutron/neutron.conf
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:

        - section: DEFAULT
          option: debug
          value: 'true'
        - section: DEFAULT
          option: core_plugin
          value: ml2
        - section: DEFAULT
          option: service_plugins
          value: router
        - section: DEFAULT
          option: allow_overlapping_ips
          value: 'true'
        - section: DEFAULT
          option: rpc_response_timeout
          value: 600
        - section: DEFAULT
          option: transport_url
          value: 'rabbit://openstack:12345@control'
        - section: DEFAULT
          option: auth_strategy
          value: keystone
        - section: DEFAULT
          option: notify_nova_on_port_status_changes
          value: 'true'
        - section: DEFAULT
          option: notify_nova_on_port_data_changes
          value: 'true'

        - section: database
          option: connection
          value: 'mysql+pymysql://neutron:12345@control/neutron'

        - section: keystone_authtoken
          option: auth_uri
          value: 'http://control:5000'
        - section: keystone_authtoken
          option: auth_url
          value: http://control:35357
        - section: keystone_authtoken
          option: memcached_servers
          value: control:11211
        - section: keystone_authtoken
          option: auth_type
          value: password
        - section: keystone_authtoken
          option: project_domain_name
          value: default
        - section: keystone_authtoken
          option: user_domain_name
          value: default
        - section: keystone_authtoken
          option: project_name
          value: service
        - section: keystone_authtoken
          option: username
          value: neutron
        - section: keystone_authtoken
          option: password
          value: 12345

        - section: nova
          option: auth_url
          value: 'http://control:35357'
        - section: nova
          option: auth_type
          value: password
        - section: nova
          option: project_domain_id
          value: default
        - section: nova
          option: user_domain_id
          value: default
        - section: nova
          option: region_name
          value: RegionOne
        - section: nova
          option: project_name
          value: service
        - section: nova
          option: username
          value: nova
        - section: nova
          option: password
          value: 12345

        - section: oslo_concurrency
          option: lock_path
          value: /var/lib/neutron/tmp

    - name: Configure the Modular Layer 2 (ML2) plug-in
      ini_file:
        path: /etc/neutron/plugins/ml2/ml2_conf.ini
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:

        - section: ml2
          option: type_drivers
          value: flat,vlan,vxlan
        - section: ml2
          option: tenant_network_types
          value: vxlan
        - section: ml2
          option: mechanism_drivers
          value: linuxbridge,l2population
        - section: ml2
          option: extension_drivers
          value: port_security

        - section: ml2_type_flat
          option: flat_networks
          value: provider

        - section: ml2_type_vxlan
          option: vni_ranges
          value: '1:1000'

        - section: securitygroup
          option: enable_ipset
          value: 'true'

    - name: Configure the Linux bridge agent
      ini_file:
        path: /etc/neutron/plugins/ml2/linuxbridge_agent.ini
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:

        - section: linux_bridge
          option: physical_interface_mappings
          value: provider:eth2

        - section: securitygroup
          option: enable_security_group
          value: 'true'
        - section: securitygroup
          option: firewall_driver
          value: neutron.agent.linux.iptables_firewall.IptablesFirewallDriver

        - section: vxlan
          option: enable_vxlan
          value: 'true'
        - section: vxlan
          option: local_ip
          value: '{{ management_ip.stdout }}'
        - section: vxlan
          option: l2_population
          value: 'true'

    - name: Configure the layer-3 agent
      ini_file:
        path: /etc/neutron/l3_agent.ini
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:
        - section: DEFAULT
          option: interface_driver
          value: linuxbridge
        - section: DEFAULT
          option: debug
          value: 'true'

    - name: Configure the DHCP agent
      ini_file:
        path: /etc/neutron/dhcp_agent.ini
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:

        - section: DEFAULT
          option: interface_driver
          value: linuxbridge
        - section: DEFAULT
          option: dhcp_driver
          value: neutron.agent.linux.dhcp.Dnsmasq
        - section: DEFAULT
          option: enable_isolated_metadata
          value: 'true'

    - name: Configure the metadata agent
      ini_file:
        path: /etc/neutron/metadata_agent.ini
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:

        - section: DEFAULT
          option: nova_metadata_ip
          value: control
        - section: DEFAULT
          option: metadata_proxy_shared_secret
          value: 12345

    - name: Configure the Compute service to use the Networking service
      ini_file:
        path: /etc/nova/nova.conf
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:

        - section: cinder
          option: os_region_name
          value: RegionOne

        - section: neutron
          option: url
          value: 'http://control:9696'
        - section: neutron
          option: auth_url
          value: 'http://control:35357'
        - section: neutron
          option: auth_type
          value: password
        - section: neutron
          option: project_domain_id
          value: default
        - section: neutron
          option: user_domain_id
          value: default
        - section: neutron
          option: region_name
          value: RegionOne
        - section: neutron
          option: project_name
          value: service
        - section: neutron
          option: username
          value: neutron
        - section: neutron
          option: password
          value: 12345
        - section: neutron
          option: service_metadata_proxy
          value: 'true'
        - section: neutron
          option: metadata_proxy_shared_secret
          value: 12345

    - name: Create /etc/neutron/plugin.ini symlink
      file:
        src: /etc/neutron/plugins/ml2/ml2_conf.ini
        dest: /etc/neutron/plugin.ini
        state: link

    - name: Populate Neutron database
      become_user: neutron
      command: >
        neutron-db-manage
          --config-file /etc/neutron/neutron.conf
          --config-file /etc/neutron/plugins/ml2/ml2_conf.ini
          upgrade head

    - name: Restart the Compute API service
      systemd:
        name: '{{ item }}'
        enabled: yes
        state: restarted
      with_items:
        - openstack-nova-api
        - neutron-server
        - neutron-linuxbridge-agent
        - neutron-dhcp-agent
        - neutron-metadata-agent
        - neutron-l3-agent

    - name: Verify Nova services are enabled and running
      shell: >
        openstack compute service list -c Binary -c Host -c Zone -c Status -c State -f value |
        grep '^{{ item }} enabled up$'
      with_items:
        - nova-consoleauth control internal
        - nova-conductor control internal
        - nova-scheduler control internal

    - name: Verify API endpoints in the Identity service to verify connectivity with the Identity service
      command:
        openstack catalog show {{ item }} -f value -c endpoints
      with_items:
        - keystone
        - glance
        - placement
        - nova
        - neutron

    - name: Verify connectivity with the Image service
      shell: >
        openstack image list -c Name -c Status -f value |
        grep '^cirros active$'

    - name: List agents to verify successful launch of the neutron agents
      shell: >
        openstack network agent list -c Binary -c Alive -c State -c Host -f value |
        grep '^control True UP {{ item }}$'
      with_items:
        - neutron-metadata-agent
        - neutron-linuxbridge-agent
        - neutron-l3-agent
        - neutron-dhcp-agent

    - name: Install dashboard components
      yum:
        name:
          - openstack-dashboard
        state: installed

    - name: Configure dashboard components
      template:
        src: etc/openstack-dashboard/local_settings
        dest: /etc/openstack-dashboard/local_settings

    - name: Restart the web server and session storage service
      systemd:
        name: '{{ item }}'
        enabled: yes
        state: restarted
      with_items:
        - httpd
        - memcached

    - name: Create database mysql user for block storage service
      mysql_db:
        name: cinder
        state: present

    - name: Grant proper access to the Cinder database
      mysql_user:
        name: cinder
        host: '{{ item }}'
        password: 12345
        priv: 'cinder.*:ALL'
        state: present
      with_items:
        - 'localhost'
        - '%'

    - name: Create a cinder user
      shell: >
        openstack user show cinder ||
        openstack user create --domain default --password 12345 cinder

    - name: Add the admin role to the cinder user
      command:
        openstack role add --project service --user cinder admin

    - name: Create the cinderv2 and cinderv3 service entities
      shell: >
        openstack service show '{{ item.name }}' ||
        openstack service create --name '{{ item.name }}' --description "OpenStack Block Storage" '{{ item.type }}'
      with_items:
        - name: cinderv2
          type: volumev2
        - name: cinderv3
          type: volumev3

    - name: Create the Block Storage service API endpoints
      shell: >
        (openstack endpoint list -f value -c Region -c 'Service Type' -c Interface |
         grep '^RegionOne {{ item.type }} {{ item.interface }}$') ||
        openstack endpoint create --region RegionOne '{{ item.type }}' '{{ item.interface }}' '{{ item.url }}'
      with_items:
        - type: volumev2
          interface: public
          url: 'http://control:8776/v2/%(project_id)s'
        - type: volumev2
          interface: internal
          url: 'http://control:8776/v2/%(project_id)s'
        - type: volumev2
          interface: admin
          url: 'http://control:8776/v2/%(project_id)s'
        - type: volumev3
          interface: public
          url: 'http://control:8776/v3/%(project_id)s'
        - type: volumev3
          interface: internal
          url: 'http://control:8776/v3/%(project_id)s'
        - type: volumev3
          interface: admin
          url: 'http://control:8776/v3/%(project_id)s'

    - name: Install Cinder components
      yum:
        name:
          - openstack-cinder
        state: installed

    - name: Remove Cinder auth token section
      ini_file:
        path: /etc/cinder/cinder.conf
        section: '{{ item }}'
        state: absent
      with_items:
        - keystone_authtoken

    - name: Configure Cinder components
      ini_file:
        path: /etc/cinder/cinder.conf
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:

        - section: database
          option: connection
          value: mysql+pymysql://cinder:12345@control/cinder

        - section: DEFAULT
          option: transport_url
          value: rabbit://openstack:12345@control
        - section: DEFAULT
          option: auth_strategy
          value: keystone
        - section: DEFAULT
          option: my_ip
          value: '{{ management_ip.stdout }}'

        - section: keystone_authtoken
          option: auth_uri
          value: http://control:5000
        - section: keystone_authtoken
          option: auth_url
          value: http://control:35357
        - section: keystone_authtoken
          option: memcached_servers
          value: control:11211
        - section: keystone_authtoken
          option: auth_type
          value: password
        - section: keystone_authtoken
          option: project_domain_id
          value: default
        - section: keystone_authtoken
          option: user_domain_id
          value: default
        - section: keystone_authtoken
          option: project_name
          value: service
        - section: keystone_authtoken
          option: username
          value: cinder
        - section: keystone_authtoken
          option: password
          value: 12345

        - section: oslo_concurrency
          option: lock_path
          value: /var/lib/cinder/tmp

    - name: Populate the Block Storage database
      become_user: cinder
      command:
        cinder-manage db sync

    - name: Restart the Compute API service
      systemd:
        name: '{{ item }}'
        enabled: yes
        state: restarted
      with_items:
        - openstack-nova-api
        - openstack-cinder-api
        - openstack-cinder-scheduler

    - name: Check provider network exists
      shell: >
        openstack network show provider
      ignore_errors: true
      register: provider_network_exists

    - name: Create provider network
      when: provider_network_exists.rc != 0
      command: >
        openstack network create \
          --share --external \
          --provider-physical-network provider \
          --provider-network-type flat provider

    - name: Check provider subnet exists
      shell: >
        openstack subnet show provider
      ignore_errors: true
      register: provider_subnet_exists

    - name: Create a subnet on the provider network
      when: provider_subnet_exists.rc != 0
      command: >
        openstack subnet create \
          --network provider \
          --allocation-pool start=203.0.113.101,end=203.0.113.250 \
          --dns-nameserver 8.8.8.8 --gateway 203.0.113.1 \
          --subnet-range 203.0.113.0/24 provider

    - name: Check self-service network exists
      shell: >
        source /home/vagrant/demo-openrc;
        openstack network show selfservice
      ignore_errors: true
      register: selfservice_network_exists

    - name: Create the self-service network
      when: selfservice_network_exists.rc != 0
      shell: >
        source /home/vagrant/demo-openrc;
        openstack network create selfservice

    - name: Check self-service subnet exists
      shell: >
        source /home/vagrant/demo-openrc;
        openstack subnet show selfservice
      ignore_errors: true
      register: selfservice_subnet_exists

    - name: Create subnet on self-service network
      when: selfservice_subnet_exists.rc != 0
      shell: >
        source /home/vagrant/demo-openrc;
        openstack subnet create --network selfservice \
          --dns-nameserver 8.8.8.8 --gateway 172.16.1.1 \
          --subnet-range 172.16.1.0/24 selfservice

    - name: Check if router exists
      shell: >
        source /home/vagrant/demo-openrc;
        openstack router show router
      ignore_errors: true
      register: router_exists

    - name: Create a router
      when: router_exists.rc != 0
      shell: >
        source /home/vagrant/demo-openrc;
        openstack router create router

    - name: Add the self-service network subnet as an interface on the router
      shell: >
        source /home/vagrant/demo-openrc;
        openstack router add subnet router selfservice
      ignore_errors: true
      register: router_subnet_added

    - name: Check selfservice subnet was already been added to router
      when: router_subnet_added.rc != 0
      shell: >
        echo "{{ router_subnet_added.stderr }}" |
          grep -e '^HttpException: Bad Request, Bad router request: Router already has a port on subnet '

    - name: Set a gateway on the provider network on the router
      shell: >
        source /home/vagrant/demo-openrc;
        openstack router set --external-gateway provider router

    - name: Check there m1.nano flavor exists
      shell: >
        openstack flavor show m1.nano
      ignore_errors: true
      register: m1_nano_flavor_exists

    - name: Create m1.name flavor
      when: m1_nano_flavor_exists.rc != 0
      command: >
        openstack flavor create --id 0 --vcpus 1 --ram 64 --disk 1 m1.nano

    - name: Check keypair exists
      shell: >
        source /home/vagrant/demo-openrc;
        openstack keypair show mykey
      ignore_errors: true
      register: keypair_exists

    - name: Generate a key pair
      when: keypair_exists.rc != 0
      command: >
        ssh-keygen -q -N "" -f /home/vagrant/mykey
      args:
        creates: /home/vagrant/mykey

    - name: Add keypair
      when: keypair_exists.rc != 0
      shell: >
        source /home/vagrant/demo-openrc;
        openstack keypair create --public-key /home/vagrant/mykey.pub mykey

    - name: Check default security group permits ICMP
      shell: >
        source /home/vagrant/demo-openrc;
        openstack security group show default -f value -c rules | grep " protocol='icmp'"
      ignore_errors: true
      register: security_group_permits_icmp

    - name: Add rules to the default security group - Permit ICMP
      when: security_group_permits_icmp.rc != 0
      shell: >
        source /home/vagrant/demo-openrc;
        openstack security group rule create --proto icmp default

    - name: Check default security group permits SSH access
      shell: >
        source /home/vagrant/demo-openrc;
        openstack security group show default -f value -c rules |
          grep -e "protocol='tcp'" -e "port_range_max='22'" -e "port_range_min='22'" -o |
          awk '{print $0} END{ if (NR != 3) exit(1) }'
      ignore_errors: true
      register: security_group_permits_ssh

    - name: Add rules to the default security group - Permit secure shell (SSH) access
      when: security_group_permits_ssh.rc != 0
      shell: >
        source /home/vagrant/demo-openrc;
        openstack security group rule create --proto tcp --dst-port 22 default

    - name: Create database for Heat
      mysql_db:
        name: heat
        state: present

    - name: Grant proper access to Heat database
      mysql_user:
        name: heat
        host: '{{ item }}'
        password: 12345
        priv: 'heat.*:ALL'
        state: present
      with_items:
        - 'localhost'
        - '%'

    - name: Check Heat user exists
      command: >
        openstack user show heat
      register: heat_user_exists
      ignore_errors: true

    - name: Create the Heat user
      when: heat_user_exists|failed
      command: >
        openstack user create --domain default --password 12345 heat

    - name: Add the admin role to the heat user
      command:
        openstack role add --project service --user heat admin

    - name: Create the heat and heat-cfn service entities
      shell: >
        openstack sercice show '{{ item.name }}' ||
        openstack service create --name '{{ item.name }}' --description "Orchestration" '{{ item.type }}'
      with_items:
        - name: heat
          type: orchestration
        - name: heat-cfn
          type: cloudformation

    - name: Create Heat endpoints
      shell: >
        (openstack endpoint list -f value -c Region -c 'Service Type' -c Interface |
         grep '^RegionOne {{ item.type }} {{ item.interface }}$') ||
        openstack endpoint create --region RegionOne '{{ item.type }}' '{{ item.interface }}' '{{ item.url }}'
      with_items:

        - type: orchestration
          interface: public
          url: 'http://control:8004/v1/%(tenant_id)s'
        - type: orchestration
          interface: internal
          url: 'http://control:8004/v1/%(tenant_id)s'
        - type: orchestration
          interface: admin
          url: 'http://control:8004/v1/%(tenant_id)ss'

        - type: cloudformation
          interface: public
          url: 'http://control:8000/v1'
        - type: cloudformation
          interface: internal
          url: 'http://control:8000/v1'
        - type: cloudformation
          interface: admin
          url: 'http://control:8000/v1'

    - name: Check heat users domain exists
      command: >
        openstack domain show heat
      ignore_errors: true
      register: heat_users_domain_exists

    - name: Create the heat domain that contains projects and users for stacks
      when: heat_users_domain_exists|failed
      command: >
        openstack domain create --description "Stack projects and users" heat

    - name: Check heat domain admin user exists
      command: >
        openstack user show heat_domain_admin
      ignore_errors: true
      register: heat_domain_admin_exists

    - name: Create the heat_domain_admin user to manage projects and users in the heat domain
      when: heat_domain_admin_exists|failed
      shell: >
        openstack user create --domain heat --password 12345 heat_domain_admin

    - name: Add the admin role to the heat_domain_admin user in the heat domain
      command: >
        openstack role add --domain heat --user-domain heat --user heat_domain_admin admin

    - name: Create the heat_stack_owner and heat_stack_user role
      shell: >
        openstack role show '{{ item }}' ||
        openstack role create '{{ item }}'
      with_items:
        - heat_stack_owner
        - heat_stack_user

    - name: Add the heat_stack_owner role to the demo project and user
      command:
        openstack role add --project demo --user demo heat_stack_owner

    - name: Install the Heat packages
      yum:
        name:
          - openstack-heat-api
          - openstack-heat-api-cfn
          - openstack-heat-engine
        state: installed

    - name: Configure Heat components
      ini_file:
        path: /etc/heat/heat.conf
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'

      with_items:

        - section: database
          option: connection
          value: 'mysql+pymysql://heat:12345@control/heat'

        - section: DEFAULT
          option: transport_url
          value: 'rabbit://openstack:12345@control'
        - section: DEFAULT
          option: heat_metadata_server_url
          value: http://control:8000
        - section: DEFAULT
          option: heat_waitcondition_server_url
          value: http://control:8000/v1/waitcondition
        - section: DEFAULT
          option: stack_domain_admin
          value: heat_domain_admin
        - section: DEFAULT
          option: stack_domain_admin_password
          value: 12345
        - section: DEFAULT
          option: stack_user_domain_name
          value: heat

        - section: keystone_authtoken
          option: auth_uri
          value: http://control:5000
        - section: keystone_authtoken
          option: auth_url
          value: http://control:35357
        - section: keystone_authtoken
          option: memcached_servers
          value: control:11211
        - section: keystone_authtoken
          option: auth_type
          value: password
        - section: keystone_authtoken
          option: project_domain_id
          value: default
        - section: keystone_authtoken
          option: user_domain_id
          value: default
        - section: keystone_authtoken
          option: project_name
          value: service
        - section: keystone_authtoken
          option: username
          value: heat
        - section: keystone_authtoken
          option: password
          value: 12345

        - section: trustee
          option: auth_type
          value: password
        - section: trustee
          option: auth_url
          value: http://control:35357
        - section: trustee
          option: username
          value: heat
        - section: trustee
          option: password
          value: 12345
        - section: trustee
          option: user_domain_name
          value: default

        - section: clients_keystone
          option: auth_uri
          value: http://control:35357

        - section: ec2authtoken
          option: auth_uri
          value: http://control:5000/v3

    - name: Populate the Orchestration database
      become_user: heat
      command:
        heat-manage db_sync

    - name: Start the Orchestration services and configure them to start when the system boots
      systemd:
        name: '{{ item }}'
        enabled: yes
        state: restarted
      with_items:
        - openstack-heat-api
        - openstack-heat-api-cfn
        - openstack-heat-engine


- hosts: compute1,compute2
  become: true
  tasks:

    - name: Installl compute node components
      yum:
        name:
          - ebtables
          - ipset
          - net-tools
          - openstack-nova-compute
          - openstack-neutron-linuxbridge
        state: installed

    - name: Get management interface IP
      shell: >
        ifconfig eth1 | awk '/\sinet\s/{print $2}'
      register: management_ip

    - name: Remove keystone_authtoken from Nova compute conf file
      ini_file:
        path: /etc/nova/nova.conf
        section: '{{ item }}'
        state: absent
      with_items:
        - keystone_authtoken
        - placement

    - name: Configure Nova compute
      ini_file:
        path: /etc/nova/nova.conf
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:

        - section: api
          option: auth_strategy
          value: keystone

        - section: DEFAULT
          option: enabled_apis
          value: osapi_compute,metadata
        - section: DEFAULT
          option: transport_url
          value: 'rabbit://openstack:12345@control'
        - section: DEFAULT
          option: my_ip
          value: '{{ management_ip.stdout }}'
        - section: DEFAULT
          option: use_neutron
          value: 'true'
        - section: DEFAULT
          option: firewall_driver
          value: nova.virt.firewall.NoopFirewallDriver

        - section: glance
          option: api_servers
          value: 'http://control:9292'

        - section: keystone_authtoken
          option: auth_uri
          value: 'http://control:5000'
        - section: keystone_authtoken
          option: auth_url
          value: 'http://control:35357'
        - section: keystone_authtoken
          option: memcached_servers
          value: 'control:11211'
        - section: keystone_authtoken
          option: auth_type
          value: password
        - section: keystone_authtoken
          option: project_domain_id
          value: default
        - section: keystone_authtoken
          option: user_domain_id
          value: default
        - section: keystone_authtoken
          option: project_name
          value: service
        - section: keystone_authtoken
          option: username
          value: nova
        - section: keystone_authtoken
          option: password
          value: 12345

        - section: neutron
          option: url
          value: 'http://control:9696'
        - section: neutron
          option: auth_url
          value: 'http://control:35357'
        - section: neutron
          option: auth_type
          value: password
        - section: neutron
          option: project_domain_id
          value: default
        - section: neutron
          option: user_domain_id
          value: default
        - section: neutron
          option: region_name
          value: RegionOne
        - section: neutron
          option: project_name
          value: service
        - section: neutron
          option: username
          value: neutron
        - section: neutron
          option: password
          value: 12345

        - section: oslo_concurrency
          option: lock_path
          value: /var/lib/nova/tmp

        - section: placement
          option: os_region_name
          value: RegionOne
        - section: placement
          option: project_domain_id
          value: default
        - section: placement
          option: project_name
          value: service
        - section: placement
          option: auth_type
          value: password
        - section: placement
          option: user_domain_id
          value: default
        - section: placement
          option: auth_url
          value: 'http://control:35357/v3'
        - section: placement
          option: username
          value: placement
        - section: placement
          option: password
          value: 12345

        - section: vnc
          option: enabled
          value: 'true'
        - section: vnc
          option: vncserver_listen
          value: 0.0.0.0
        - section: vnc
          option: vncserver_proxyclient_address
          value: '$my_ip'
        - section: vnc
          option: novncproxy_base_url
          value: 'http://control:6080/vnc_auto.html'

    - name: Determine whether compute node supports hardware acceleration
      command:
        grep -e vmx -e svm /proc/cpuinfo
      ignore_errors: true
      register: has_hardware_acceleration

    - name: Disable hardware acceleration
      ini_file:
        path: /etc/nova/nova.conf
        section: libvirt
        option: virt_type
        value: qemu
      when: has_hardware_acceleration.rc != 0

    - name: Remove database connection option
      ini_file:
        path: /etc/neutron/neutron.conf
        section: database
        option: connection
        state: absent

    - name: Remove keystone_authtoken section
      ini_file:
        path: /etc/neutron/neutron.conf
        section: keystone_authtoken
        state: absent

    - name: Configure Neutron compute components
      ini_file:
        path: /etc/neutron/neutron.conf
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:

        - section: DEFAULT
          option: transport_url
          value: 'rabbit://openstack:12345@control'
        - section: DEFAULT
          option: auth_strategy
          value: keystone

        - section: keystone_authtoken
          option: auth_uri
          value: 'http://control:5000'
        - section: keystone_authtoken
          option: auth_url
          value: 'http://control:35357'
        - section: keystone_authtoken
          option: memcached_servers
          value: 'control:11211'
        - section: keystone_authtoken
          option: auth_type
          value: password
        - section: keystone_authtoken
          option: project_domain_id
          value: default
        - section: keystone_authtoken
          option: user_domain_id
          value: default
        - section: keystone_authtoken
          option: project_name
          value: service
        - section: keystone_authtoken
          option: username
          value: neutron
        - section: keystone_authtoken
          option: password
          value: 12345

        - section: oslo_concurrency
          option: lock_path
          value: /var/lib/neutron/tmp

    - name: Configure self-service networks
      ini_file:
        path: /etc/neutron/plugins/ml2/linuxbridge_agent.ini
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:

        - section: linux_bridge
          option: physical_interface_mappings
          value: provider:eth2

        - section: securitygroup
          option: enable_security_group
          value: 'true'
        - section: securitygroup
          option: firewall_driver
          value: neutron.agent.linux.iptables_firewall.IptablesFirewallDriver

        - section: vxlan
          option: enable_vxlan
          value: 'true'
        - section: vxlan
          option: local_ip
          value: '{{ management_ip.stdout }}'
        - section: vxlan
          option: l2_population
          value: 'true'

    - name: Enable and start libvirtd and Nova compute services
      systemd:
        name: '{{ item }}'
        enabled: yes
        state: restarted
      with_items:
        - libvirtd
        - openstack-nova-compute
        - neutron-linuxbridge-agent


- hosts: block
  become: true
  tasks:

    - name: Install ifconfig
      yum:
        name: net-tools
        state: installed

    - name: Get management interface IP
      shell: >
        ifconfig eth1 | awk '/\sinet\s/{print $2}'
      register: management_ip

    - name: Installl compute node components
      yum:
        state: installed
        name:
          - lvm2

    - name: Start the LVM metadata service and configure it to start when the system boots
      systemd:
        name: '{{ item }}'
        enabled: yes
        state: restarted
      with_items:
        - lvm2-lvmetad

    - name: Get free block device
      shell: >
        ls /dev/[vs]db | head -n 1
      register: block_device

    - name: Check if LVM physical volume {{ block_device.stdout }} exists
      command:
        pvdisplay {{ block_device.stdout }}
      ignore_errors: true
      register: has_lvm_physical_volume

    - name: Create the LVM physical volume {{ block_device.stdout }}
      command:
        pvcreate {{ block_device.stdout }}
      when: has_lvm_physical_volume.rc != 0

    - name: Check if LVM volume group {{ block_device.stdout }} exists
      command:
        vgdisplay cinder-volumes
      ignore_errors: true
      register: has_lvm_volume_group

    - name: Create the LVM volume group cinder-volumes
      command:
        vgcreate cinder-volumes {{ block_device.stdout }}
      when: has_lvm_volume_group.rc != 0

    - name:
      template:
        src: etc/lvm/lvm_cinder.conf
        dest: /etc/lvm/lvm_cinder.conf

    - name: Install cinder components
      yum:
        state: installed
        name:
          - openstack-cinder
          - targetcli
          - python-keystone

    - name: Remove keystone_authtoken section
      ini_file:
        path: /etc/cinder/cinder.conf
        section: keystone_authtoken
        state: absent

    - name: Configure cinder components
      ini_file:
        path: /etc/cinder/cinder.conf
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:

        - section: database
          option: connection
          value: 'mysql+pymysql://cinder:12345@control/cinder'

        - section: DEFAULT
          option: transport_url
          value: 'rabbit://openstack:12345@control'
        - section: DEFAULT
          option: auth_strategy
          value: keystone
        - section: DEFAULT
          option: my_ip
          value: '{{ management_ip.stdout }}'
        - section: DEFAULT
          option: enabled_backends
          value: lvm
        - section: DEFAULT
          option: glance_api_servers
          value: 'http://control:9292'

        - section: keystone_authtoken
          option: auth_uri
          value: 'http://control:5000'
        - section: keystone_authtoken
          option: auth_url
          value: 'http://control:35357'
        - section: keystone_authtoken
          option: memcached_servers
          value: 'control:11211'
        - section: keystone_authtoken
          option: auth_type
          value: password
        - section: keystone_authtoken
          option: project_domain_id
          value: default
        - section: keystone_authtoken
          option: user_domain_id
          value: default
        - section: keystone_authtoken
          option: project_name
          value: service
        - section: keystone_authtoken
          option: username
          value: cinder
        - section: keystone_authtoken
          option: password
          value: 12345

        - section: lvm
          option: volume_driver
          value: cinder.volume.drivers.lvm.LVMVolumeDriver
        - section: lvm
          option: volume_group
          value: cinder-volumes
        - section: lvm
          option: iscsi_protocol
          value: iscsi
        - section: lvm
          option: iscsi_helper
          value: lioadm

        - section: oslo_concurrency
          option: lock_path
          value: /var/lib/cinder/tmp

    - name: Enable and start cinder services
      systemd:
        name: '{{ item }}'
        enabled: yes
        state: restarted
      with_items:
        - openstack-cinder-volume
        - target


#- hosts: control
#  become: true
#  environment:
#    OS_USERNAME: demo
#    OS_PASSWORD: demo
#    OS_PROJECT_NAME: demo
#    OS_USER_DOMAIN_ID: default
#    OS_PROJECT_DOMAIN_ID: default
#    OS_AUTH_URL: 'http://control:5000/v3'
#    OS_IDENTITY_API_VERSION: 3
#    OS_IMAGE_API_VERSION: 2
#  tasks:
#
#    - name: Get selfservice network id
#      command: >
#        openstack network show selfservice -c id -f value
#      register:
#        network_id
#
#    - name: Get instance ID
#      command: >
#        openstack server show selfservice-instance -c id -f value
#      register: instance_id
#      ignore_errors: true
#
#    - name: Launch an instance
#      when: instance_id|failed
#      command: >
#        openstack server create
#          --flavor m1.nano
#          --image cirros
#          --nic net-id={{ network_id.stdout }}
#          --security-group default
#          --key-name mykey
#          selfservice-instance
