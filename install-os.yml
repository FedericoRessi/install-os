---

- hosts: all
  become: true
  tasks:

    - name: Configure host name
      hostname:
        name: "{{ inventory_hostname }}"
      tags: dns

    - name: Generate /etc/hosts file
      template:
        src: etc/hosts.j2
        dest: /etc/hosts
      tags: dns

    - name: Install NTP service
      yum:
        name: chrony
        state: installed
      tags: ntp

    - name: Make sure NTP is started up
      systemd:
        name: chronyd
        enabled: yes
        state: restarted
      tags: ntp

    - name: Enable the OpenStack repository
      yum:
        name: centos-release-openstack-ocata
        state: installed
      tags: upgrade

    - name: Upgrade all packages
      yum: name=* state=latest
      tags: upgrade

    - name: Check for reboot hint
      shell: |
        LAST_KERNEL=$(rpm -q --last kernel | awk 'NR==1{sub(/kernel-/,""); print $1}')
        CURRENT_KERNEL=$(uname -r); if [ $LAST_KERNEL != $CURRENT_KERNEL ]; then
          echo 'reboot'
        else
          echo 'no'
        fi
      ignore_errors: true
      register: reboot_hint
      tags: upgrade

    - name: Reboot {{ inventory_hostname }} node
      shell: >
        sleep 2 &&
        shutdown -r +1 "Reboot required to update kernel."
      async: 1
      poll: 0
      ignore_errors: true
      when: reboot_hint.stdout.find("reboot") != -1
      tags: upgrade

    - name: Waiting for {{ inventory_hostname }} node to come back...
      local_action: wait_for host={{ inventory_hostname }} state=started delay=10 timeout=300
      become: false
      when: reboot_hint.stdout.find("reboot") != -1
      tags: upgrade

    - name: Install OpenStack client
      yum:
        name: python-openstackclient,openstack-selinux
        state: installed

    - name: check to see if pip is already installed
      command: "pip --version"
      ignore_errors: true
      register: pip_is_installed
      changed_when: false

    - block:
        - name: download get-pip.py
          get_url:
            url: https://bootstrap.pypa.io/get-pip.py
            dest: /tmp

        - name: install pip
          command: "python /tmp/get-pip.py"

        - name: delete get-pip.py
          file:
            path: /tmp/get-pip.py
            state: absent

      when: pip_is_installed.rc != 0

    - name: Install pexpect
      pip:
        name: pexpect
        version: 4


- hosts: control
  become: true
  environment:
    OS_USERNAME: admin
    OS_PASSWORD: 12345
    OS_PROJECT_NAME: admin
    OS_USER_DOMAIN_NAME: Default
    OS_PROJECT_DOMAIN_NAME: Default
    OS_AUTH_URL: http://control:35357/v3
    OS_IDENTITY_API_VERSION: 3

  tasks:

    - name: Install MariaDB service
      yum:
        name: mariadb,mariadb-server,python2-PyMySQL,MySQL-python 
        state: installed

    - name: Get management interface IP
      shell: >
        ifconfig eth1 | awk '/\sinet\s/{print $2}'
      register: get_management_ip

    - name: Enable access to database via the management network
      template:
        src: etc/my.cnf.d/openstack.cnf.j2
        dest: /etc/my.cnf.d/openstack.cnf

    - name: Start and enable the MariaDB service
      systemd:
        name: mariadb
        enabled: yes
        state: restarted

    - name: Enter root password for MariaDB service
      shell: |
        echo -e "\nn\nY\nY\nY\nY" | mysql_secure_installation

    - name: Install RabbitMQ service
      yum:
        name: rabbitmq-server
        state: installed

    - name: Start and enable RabbitMQ service
      systemd:
        name: rabbitmq-server
        enabled: yes
        state: started

    - name: Add openstack user to RabbitMQ service
      shell: |
        rabbitmqctl add_user openstack 1234
        rabbitmqctl set_permissions openstack ".*" ".*" ".*"

    - name: Install Memcached service
      yum:
        name: memcached,python-memcached
        state: installed

    - name: Configure Memcached service to use the management IP address
      lineinfile:
        path: "/etc/sysconfig/memcached"
        regexp: '^OPTIONS='
        line: >
          OPTIONS="-l 127.0.0.1,::1,controller"

    - name: Start and enable RabbitMQ service
      systemd:
        name: memcached
        enabled: yes
        state: restarted

    - name: Create database for keystone
      mysql_db:
        name: keystone
        state: present

    - name: Grant proper access to the keystone database
      mysql_user:
        name: keystone
        host: '{{ item }}'
        password: 12345
        priv: 'keystone.*:ALL'
        state: present
      with_items:
        - 'localhost'
        - '%'

    - name: Install keystone components
      yum:
        name: openstack-keystone,httpd,mod_wsgi
        state: installed

    - name: Configure Keystone database access
      ini_file:
        path: /etc/keystone/keystone.conf
        section: database
        option: connection
        value: 'mysql+pymysql://keystone:12345@control/keystone'

    - name: Configure the Fernet token provider
      ini_file:
        path: /etc/keystone/keystone.conf
        section: token
        option: provider
        value: fernet

    - name: Populate the Identity service database
      become_user: keystone
      shell: >
        keystone-manage db_sync

    - name: Initialize Fernet key repositories
      shell: >
        keystone-manage {{ item }} --keystone-user keystone --keystone-group keystone
      with_items:
        - fernet_setup
        - credential_setup

    - name: Bootstrap the Identity service
      shell: >
        keystone-manage bootstrap --bootstrap-password 12345 \
          --bootstrap-admin-url http://control:35357/v3/ \
          --bootstrap-internal-url http://control:5000/v3/ \
          --bootstrap-public-url http://control:5000/v3/ \
          --bootstrap-region-id RegionOne

    - name: Configure the Apache HTTP server for Keystone
      lineinfile:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^ServerName\s'
        line: ServerName control

    - name: Create a link to the /usr/share/keystone/wsgi-keystone.conf file
      file:
        src: /usr/share/keystone/wsgi-keystone.conf
        dest: /etc/httpd/conf.d/wsgi-keystone.conf
        state: link

    - name: Start the Apache HTTP service and configure it to start when the system boots
      systemd:
        name: httpd
        enabled: yes
        state: restarted

    - name: Create defautl projects
      shell: |
        openstack project show {{ item | lower }} || \
        openstack project create --domain default --description "{{ item }} Project" {{ item | lower }}
      with_items:
        - Service
        - Demo

    - name: Create the demo user
      shell: >
        openstack user show demo ||
        openstack user create --domain default --password demo demo

    - name: Create the user role
      shell: >
        openstack role show user ||
        openstack role create user

    - name: Add the user role to the demo user of the demo project
      shell: >
        openstack role add --project demo --user demo user

    - name: disable the temporary authentication token mechanism
      ini_file:
        path: /etc/keystone/keystone-paste.ini
        section: "{{ item }}"
        option: admin_token_auth
        state: absent
      with_items:
        - pipeline:public_api
        - pipeline:admin_api
        - pipeline:api_v3

    - name: Check admin user authentication
      environment:
        OS_AUTH_URL: ""
        OS_PASSWORD: ""
      expect:
        command: >
          openstack
            --os-auth-url http://control:35357/v3
            --os-project-domain-name default
            --os-user-domain-name default
            --os-project-name admin
            --os-username admin token issue
        responses:
          Password: 12345

    - name: Check demo user authentication
      environment:
        OS_AUTH_URL: ""
        OS_PASSWORD: ""
      expect:
        command: >
          openstack
            --os-auth-url http://control:5000/v3
            --os-project-domain-name default
            --os-user-domain-name default
            --os-project-name demo
            --os-username demo token issue
        responses:
          Password: demo

    - name: Provide openrc scripts directory
      file:
        path: /root/.openrc
        state: directory
        mode: 0700

    - name: Provide openrc scripts
      template:
        src: 'openrc/{{ item }}.j2'
        dest: '/root/.openrc/{{ item }}'
      with_items:
        - admin-openrc
        - demo-openrc

    - name: Test openrc scripts
      shell: |
        source /root/.openrc/{{ item }}
        openstack token issue
      with_items:
        - admin-openrc
        - demo-openrc

    - name: Create database for Glance
      mysql_db:
        name: glance
        state: present

    - name: Grant proper access to the keystone database
      mysql_user:
        name: glance
        host: '{{ item }}'
        password: 12345
        priv: 'glance.*:ALL'
        state: present
      with_items:
        - 'localhost'
        - '%'

    - name: Create glance user if it doesn't exist
      shell: >
        openstack user show glance ||
        openstack user create --domain default --password 12345 glance

    - name: Add the admin role to the glance user and service project
      command:
        openstack role add --project service --user glance admin

    - name: Create the glance service entity
      command:
        openstack service create --name glance --description "OpenStack Image" image

    - name: Create the Image service API endpoints
      shell: >
        (openstack endpoint list -f value -c Region -c 'Service Name' -c Interface | 
         grep '^RegionOne glance {{ item }}$') ||
        openstack endpoint create --region RegionOne image {{ item }} http://control:9292
      with_items:
        - public
        - internal
        - admin
